#version 460

#include "incl/defs.glsl"
#include "incl/tone_mapping.glsl"

#define GROUP_SIZE 1024
#define THREADS_X  32
#define THREADS_Y  32

layout (std430, set = 0, binding = 0) 
#include "incl/luminanceSSBO.incl" 
ssbo;

layout (set = 0, binding = 1) 
#include "incl/luminanceUB.incl" 
ub;

layout (rgba32f, set = 0, binding = 2) uniform readonly image2D inlogLumImage;

layout (rgba32f, set = 0, binding = 3) uniform writeonly image2D baseFreqImage;
layout (rgba32f, set = 0, binding = 4) uniform writeonly image2D detailImage;

#define SIGMA 10.0
#define BSIGMA 0.1
#define MSIZE 15

float normpdf(in float x, in float sigma)
{
	return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
}

float normpdf3(in vec3 v, in float sigma)
{
	return 0.39894*exp(-0.5*dot(v,v)/(sigma*sigma))/sigma;
}

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
	uvec2 dim = imageSize(inlogLumImage).xy;
	// Ignore threads that map to areas beyond the bounds of our image
	if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) {
		// Filter implementation from https://www.shadertoy.com/view/4dfGDH
		ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
        vec3 c = imageLoad(inlogLumImage, coords).rgb;
		
		//declare stuff
		const int kSize = (MSIZE-1)/2;
		float kernel[MSIZE];
		vec3 final_colour = vec3(0.0);
		
		//create the 1-D kernel
		float Z = 0.0;
		for (int j = 0; j <= kSize; ++j) {
			kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), SIGMA);
		}
		
		vec3 cc;
		float factor;
		float bZ = 1.0/normpdf(0.0, BSIGMA);
		//read out the texels
		for (int i=-kSize; i <= kSize; ++i) {
			for (int j=-kSize; j <= kSize; ++j) {
				cc = imageLoad(inlogLumImage, coords + ivec2(i, j)).rgb;
				factor = normpdf3(cc-c, BSIGMA)*bZ*kernel[kSize+j]*kernel[kSize+i];
				Z += factor;
				final_colour += factor*cc;
			}
		}
		
		vec3 outColor = final_colour/Z;
		imageStore(baseFreqImage, coords, vec4(outColor, 1.0));

		vec3 detail = c - outColor;
		imageStore(detailImage, coords, vec4(detail, 1.0));
	}
}