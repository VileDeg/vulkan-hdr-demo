#version 460

#include "incl/defs.glsl"

#define GROUP_SIZE 1024
#define THREADS_X  32
#define THREADS_Y  32

#include "incl/compPC.incl"
pc;

layout (rgba32f, set = 0, binding = 0) uniform image2D image[MAX_VIEWPORT_MIPS];

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;


void main() {
	int mip_i = pc.mipIndex;
	ivec2 dim = imageSize(image[mip_i]).xy;
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

	if (coords.x < dim.x && coords.y < dim.y) {
		vec4 current = imageLoad(image[mip_i], coords);
		//vec4 px = current + imageLoad(image[mip_i+1], coords >> 1);

		float sampleScale = 1.0;
		ivec4 d = ivec4(vec4(1.0, 1.0, -1.0, 0.0) * sampleScale);

		ivec2 coordsHigher = coords >> 1;

		vec4 px;
		px =  imageLoad(image[mip_i+1], (coordsHigher - d.xy));
		px += imageLoad(image[mip_i+1], (coordsHigher - d.wy)) * 2.0;
		px += imageLoad(image[mip_i+1], (coordsHigher - d.zy));

		px += imageLoad(image[mip_i+1], (coordsHigher + d.zw)) * 2.0;
		px += imageLoad(image[mip_i+1], (coordsHigher       )) * 4.0;
		px += imageLoad(image[mip_i+1], (coordsHigher + d.xw)) * 2.0;

		px += imageLoad(image[mip_i+1], (coordsHigher + d.zy));
		px += imageLoad(image[mip_i+1], (coordsHigher + d.wy)) * 2.0;
		px += imageLoad(image[mip_i+1], (coordsHigher + d.xy));

		px /= 16.0;

		//px /= (mip_i + 1) * 0.5;

		imageStore(image[mip_i], coords, current + px);
	}
}
