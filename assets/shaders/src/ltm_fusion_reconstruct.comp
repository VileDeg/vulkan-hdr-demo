#version 460

#include "incl/defs.glsl"
#include "incl/compute_structs.glsl"
#include "incl/tone_mapping.glsl"
#include "incl/color_spaces.glsl"

#define GROUP_SIZE 1024
#define THREADS_X  32
#define THREADS_Y  32

layout (rgba32f, set = 0, binding = 0) uniform readonly image2D inChrominanceImage;
layout (rgba32f, set = 0, binding = 1) uniform readonly image2D inLaplacianSumImage;

layout (rgba32f, set = 0, binding = 2) uniform writeonly image2D finalImage;

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
	uvec2 dim = imageSize(inLaplacianSumImage).xy; // Mip level 0 corresponds to full-res image
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	// Ignore threads that map to areas beyond the bounds of our image
	if (coords.x < dim.x && coords.y < dim.y) {
		vec3  chrom = imageLoad(inChrominanceImage, coords).rgb;
		float laplacianSum = imageLoad(inLaplacianSumImage, coords).r; // Since it's luminance we only need one channel
        
        vec3 final = lab2rgb(vec3(laplacianSum, chrom.y, chrom.z));

		imageStore(finalImage, coords, vec4(final, 1.0));
	}
}