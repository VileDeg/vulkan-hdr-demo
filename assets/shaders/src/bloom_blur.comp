#version 460

#include "incl/defs.glsl"

#define THREADS_X  32
#define THREADS_Y  32

/*layout (set = 0, binding = 0) 
#include "incl/computeUB.incl" 
ub;*/

#include "incl/compPC.incl" 
pc;

layout (rgba32f, set = 0, binding = 0) uniform readonly image2D inImage[MAX_VIEWPORT_MIPS];
layout (rgba32f, set = 0, binding = 1) uniform writeonly image2D outImage[MAX_VIEWPORT_MIPS];

#define KSIZE 5
float weight[KSIZE] = { 0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162 };

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
	int i = pc.mipIndex;
	ivec2 dim = imageSize(inImage[i]).xy;
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

	if (coords.x < dim.x && coords.y < dim.y) {
		ivec2 dir = pc.horizontalPass ? ivec2(1, 0) : ivec2(0, 1);

		//vec3 px = vec3(0);
		vec3 px = imageLoad(inImage[i], coords).rgb * weight[0];
		for (int i = 1; i < KSIZE; ++i) { // KSIZE+1
			ivec2 pdir = coords + dir * i;
			ivec2 ndir = coords - dir * i;
			/*if (pc.horizontalPass) {
				pdir = clamp(pdir, 0, dim.x-1);
				ndir = clamp(ndir, 0, dim.x-1);
			} else {
				pdir = clamp(pdir, 0, dim.y-1);
				ndir = clamp(ndir, 0, dim.y-1);
			}*/
			px += imageLoad(inImage[i], pdir).rgb * weight[i];
			px += imageLoad(inImage[i], ndir).rgb * weight[i];
		}
		//px = imageLoad(inImage[i], coords).rgb;
		//px = vec3(1, 0, 1);
		//imageStore(outImage, coords, vec4(px, 1.0));
		imageStore(outImage[i], coords, vec4(px, 1.0));
	}
}