#version 460

#include "incl/defs.glsl"

#define GROUP_SIZE 1024
#define THREADS_X  32
#define THREADS_Y  32

#include "incl/compPC.incl"
pc;

layout (rgba32f, set = 0, binding = 0) uniform image2D image[MAX_VIEWPORT_MIPS];


// [Jimenez14] http://goo.gl/eomGso
// . . . . . . .
// . A . B . C .
// . . D . E . .
// . F . G . H .
// . . I . J . .
// . K . L . M .
// . . . . . . .

#if 0
    // 2x2 billinear fetch
    // A B
    // C D
    vec4 billinear(image2D img, ivec2 tc) 
    {
        vec4 A = imageLoad(img, tc);
        vec4 B = imageLoad(img, tc + ivec2(1, 0));
        vec4 C = imageLoad(img, tc + ivec2(0, -1));
        vec4 D = imageLoad(img, tc + ivec2(-1, -1));

        return (A + B + C + D) * 0.25;
    }


    // 4x4 box filter
    // A . B .
    // . . . .
    // C . D .
    // . . . .
    vec4 box(image2D img, ivec2 tc) 
    {
        vec4 A = billinear(img, tc + ivec2(-1, -1));
        vec4 B = billinear(img, tc + ivec2(1, -1));
        vec4 C = billinear(img, tc + ivec2(-1, 1));
        vec4 D = billinear(img, tc + ivec2(1, 1));

        return (A + B + C + D) * 0.25;
    }
#else 

    #if 0
        // 2x2 fetch
        // A B
        // C D
        #define billinear(img, tc) ( \
            ( \
                imageLoad(img, (tc)) + \
                imageLoad(img, (tc) + ivec2(1, 0)) + \
                imageLoad(img, (tc) + ivec2(0, -1)) + \
                imageLoad(img, (tc) + ivec2(-1, -1)) \
            ) * 0.25\
        )
    #else 
        #define DIM imageSize(image[i]).xy
        // 3x3 fetch
        // A B C
        // D E F
        // G H I
        #define f3x3tent(img, tc) ( \
            ( \
                imageLoad(img, (tc) + ivec2(-1, -1)) + \
                imageLoad(img, (tc) + ivec2(0 , -1)) * 2.0 + \
                imageLoad(img, (tc) + ivec2(1 , -1)) + \
                \
                imageLoad(img, (tc) + ivec2(-1,  0)) * 2.0 + \
                imageLoad(img, (tc)                ) * 4.0 + \
                imageLoad(img, (tc) + ivec2(1 ,  0)) * 2.0 + \
                \
                imageLoad(img, (tc) + ivec2(-1,  1)) + \
                imageLoad(img, (tc) + ivec2(0 ,  1)) * 2.0 + \
                imageLoad(img, (tc) + ivec2(1 ,  1)) \
            ) * 0.0625 /* 1/16 */\
        )

        // 9x9
        // . . .  . . .  . . .
        // . A .  . B .  . C .
        // . . .  . . .  . . .
        //
        // . . .  . . .  . . .
        // . D .  . E .  . F .
        // . . .  . . .  . . .
        //
        // . . .  . . .  . . .
        // . G .  . H .  . I .
        // . . .  . . .  . . .
        #define f9x9tent(img, tc) ( \
            ( \
                f3x3tent(img, (tc) + ivec2(-3, -3)) + \
                f3x3tent(img, (tc) + ivec2(0 , -3)) * 2.0 + \
                f3x3tent(img, (tc) + ivec2(3 , -3)) + \
                \
                f3x3tent(img, (tc) + ivec2(-3,  0)) * 2.0 + \
                f3x3tent(img, (tc)                ) * 4.0 + \
                f3x3tent(img, (tc) + ivec2(3 ,  0)) * 2.0 + \
                \
                f3x3tent(img, (tc) + ivec2(-3,  3)) + \
                f3x3tent(img, (tc) + ivec2(0 ,  3)) * 2.0 + \
                f3x3tent(img, (tc) + ivec2(3 ,  3)) \
            ) * 0.0625 /* 1/16 */\
        )

    #endif

    #define box(img, tc) ( \
        ( \
            billinear(img, tc + ivec2(-1, -1)) + \
            billinear(img, tc + ivec2(1, -1)) + \
            billinear(img, tc + ivec2(-1, 1)) + \
            billinear(img, tc + ivec2(1, 1)) \
        ) * 0.25 \
    )

#endif

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
	int i = pc.mipIndex;
	ivec2 dim = imageSize(image[i]).xy;
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

	if (coords.x < dim.x && coords.y < dim.y) {
		ivec2 coordsHigher = coords << 1;
		
#if 0
		vec4 A = imageLoad(image[i-1], coordsHigher + ivec2(-1.0, -1.0));
        vec4 B = imageLoad(image[i-1], coordsHigher + ivec2( 0.0, -1.0));
        vec4 C = imageLoad(image[i-1], coordsHigher + ivec2( 1.0, -1.0));
        vec4 D = imageLoad(image[i-1], coordsHigher + ivec2(-0.5, -0.5));
        vec4 E = imageLoad(image[i-1], coordsHigher + ivec2( 0.5, -0.5));
        vec4 F = imageLoad(image[i-1], coordsHigher + ivec2(-1.0,  0.0));
        vec4 G = imageLoad(image[i-1], coordsHigher                    );
        vec4 H = imageLoad(image[i-1], coordsHigher + ivec2( 1.0,  0.0));
        vec4 I = imageLoad(image[i-1], coordsHigher + ivec2(-0.5,  0.5));
        vec4 J = imageLoad(image[i-1], coordsHigher + ivec2( 0.5,  0.5));
        vec4 K = imageLoad(image[i-1], coordsHigher + ivec2(-1.0,  1.0));
        vec4 L = imageLoad(image[i-1], coordsHigher + ivec2( 0.0,  1.0));
        vec4 M = imageLoad(image[i-1], coordsHigher + ivec2( 1.0,  1.0));

        vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);

        vec4 px = (D + E + I + J) * div.x;
        px += (A + B + G + F) * div.y;
        px += (B + C + H + G) * div.y;
        px += (F + G + L + K) * div.y;
        px += (G + H + M + L) * div.y;
#else
        //vec4 px = box(image[i-1], coordsHigher);
        //vec4 px = f3x3tent(image[i-1], coordsHigher);
        vec4 px = f9x9tent(image[i-1], coordsHigher);
#endif

		imageStore(image[i], coords, px);
	}
}
