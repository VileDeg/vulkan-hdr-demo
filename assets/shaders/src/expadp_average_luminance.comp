// Based on https://bruop.github.io/exposure/
/*The MIT License (MIT)

Copyright © 2019 Bruno Opsenica

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/

#version 460

#include "incl/defs.glsl"
#include "incl/compute_structs.glsl"

#define GROUP_SIZE 256
#define THREADS_X 256
#define THREADS_Y 1

layout (std430, set = 0, binding = 0) 
#include "incl/computeSSBO.incl" 
ssbo;

layout (set = 0, binding = 1) 
#include "incl/computeUB.incl" 
ub;

// Shared
shared uint histogramShared[GROUP_SIZE];

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
    
    if (gl_LocalInvocationIndex >= ub.adp.lumLowerIndex && gl_LocalInvocationIndex <= ub.adp.lumUpperIndex) {
    
        // Get the count from the histogram buffer
        uint countForThisBin = ssbo.histogram[gl_LocalInvocationIndex];

        histogramShared[gl_LocalInvocationIndex] = uint(countForThisBin * uint(gl_LocalInvocationIndex * ub.adp.weights.x));
    }

    barrier();

    // We only need to calculate this once, so only a single thread is needed.
    if (gl_LocalInvocationIndex == 0) {
        uint sum = 0;
        uint total_pixels = 0;
        for (uint i = ub.adp.lumLowerIndex; i < ub.adp.lumUpperIndex+1; ++i) {
            //for (uint i = 0; i < MAX_LUMINANCE_BINS; ++i) {
            sum += histogramShared[i];
            total_pixels += ssbo.histogram[i];
        }

        // Divide weighted sum by the number of pixels that were taken into account. 
        // max is used in case total_pixels is less than 1.
        float weightedLogAverage = (sum / max(float(total_pixels), 1.0));

        // Map from our histogram log2 space to linear luminance
        // - 1.0 is to account for + 1.0 that were added when converting to log space
        float weightedAvgLum = exp2(
            ((weightedLogAverage - 1.0) / 254.0) * 
            (ub.adp.maxLogLum - ub.adp.minLogLum)
            + ub.adp.minLogLum
        );

        // Set target luminance for display and comparison
        ssbo.targetAverageLuminance = weightedAvgLum;

        // The new stored value will be interpolated using the last frames value
        // to prevent sudden shifts in the exposure.
        float lumLastFrame = ssbo.averageLuminance;
        float adaptedLum = lumLastFrame + (weightedAvgLum - lumLastFrame) * ub.adp.timeCoeff;

        ssbo.averageLuminance = adaptedLum;
    }
}
