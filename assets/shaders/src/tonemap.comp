// Based on https://bruop.github.io/exposure/

#version 460

#include "defs.glsl"
#include "tone_mapping.glsl"

#define GROUP_SIZE 1024
#define THREADS_X 32
#define THREADS_Y 32

layout (std430, set = 0, binding = 0) buffer Luminance {
    float minLogLum;
    float logLumRange;
    float oneOverLogLumRange;
    int totalPixelNum;

    float averageLuminance;
    float timeCoeff;
    int _pad0;
    int _pad1;

    uint histogram[MAX_LUMINANCE_BINS];
} ssbo;

layout (rgba32f, set = 0, binding = 1) uniform image2D inOutHDRImage;

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
    uvec2 dim = imageSize(inOutHDRImage).xy;
    vec3 mapped;
    // Ignore threads that map to areas beyond the bounds of our HDR image
    if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) {
        vec3 hdrColor = imageLoad(inOutHDRImage, ivec2(gl_GlobalInvocationID.xy)).xyz;
        // Apply eye adaptation
        vec3 adapted = hdrColor / (9.6f + (ssbo.averageLuminance * 10.f));

        // Apply tone mapping
        mapped = ACESFilm(adapted);
    }

    // Gamma correction
    const float gamma = 2.2f;
    vec3 corrected = pow(mapped, vec3(1.f / gamma));
    // Store final color
    imageStore(inOutHDRImage, ivec2(gl_GlobalInvocationID.xy), vec4(corrected, 1.f));
}