#version 460

#include "incl/defs.glsl"
#include "incl/tone_mapping.glsl"

#define GROUP_SIZE 1024
#define THREADS_X  32
#define THREADS_Y  32

layout (set = 0, binding = 0) 
#include "incl/computeUB.incl" 
ub;

layout (rgba32f, set = 0, binding = 1) uniform readonly image2D inImage;

layout (rgba32f, set = 0, binding = 2) uniform writeonly image2D chrominanceImage;

layout (rgba32f, set = 0, binding = 3) uniform writeonly image2D luminanceImage;
layout (rgba32f, set = 0, binding = 4) uniform writeonly image2D weightImage;

const float WHITE_POINT = 10.0;

vec3 applyToneMapping(vec3 col) {
	vec3 outCol = col;
	switch (ub.toneMappingMode) {
        case 0: outCol = ReinhardExtended(col, WHITE_POINT); break;
        case 1: outCol = Reinhard(col); break;
        case 2: outCol = Uncharted2Filmic(col); break;
        case 3: outCol = ACESFilm(col); break;
        case 4: outCol = ACESFitted(col); break;
    }
	return outCol;
}

//const float shadowExp = exp2(1.5);
//const float highlightExp = exp2(-2.0);

//const float exposure = 0.0;

//const float sigmaSq = 5 * 5;

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
	uvec2 dim = imageSize(inImage).xy;
	// Ignore threads that map to areas beyond the bounds of our image
	if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) {
        ivec2 coords  = ivec2(gl_GlobalInvocationID.xy);
		vec3 inpColor = imageLoad(inImage, coords).rgb;
		//inpColor *= exp2(exposure);

		
#if 1
		vec3 midtonesColor = clamp(applyToneMapping(inpColor) * exp2(ub.midtonesExposure), 0.0, 1.0);
		float highlights = dot(clamp(applyToneMapping(inpColor * exp2(ub.highlightsExposure)), 0.0, 1.0), RGB_TO_LUM);

		//float midtonesSquare = dot(midtonesColor, RGB_TO_LUM);
        float midtones   = dot(midtonesColor, RGB_TO_LUM);

        float shadows	 = dot(clamp(applyToneMapping(inpColor * exp2(ub.shadowsExposure)), 0.0, 1.0), RGB_TO_LUM);
#else
		vec3 midtonesColor = inpColor;
		float highlights = dot(inpColor * exp2(ub.highlightsExposure), RGB_TO_LUM);
        float midtones   = dot(inpColor * exp2(ub.midtonesExposure), RGB_TO_LUM);
        float shadows	 = dot(inpColor * exp2(ub.shadowsExposure), RGB_TO_LUM);
#endif
		vec3 lums  = vec3(highlights, midtones, shadows);
		vec3 chrom = midtonesColor / midtones;

		// Compute weights of three exposures based on closedness to gray (measured with Gaussian function)
		vec3 diff = lums - vec3(0.5);
        vec3 weights = vec3(exp(-0.5 * diff * diff * ub.exposednessWeightSigma * ub.exposednessWeightSigma));

		// Normalize weights
        weights /= dot(weights, vec3(1.0)) + 0.00001;

		imageStore(luminanceImage, coords, vec4(lums, 1.0));
		imageStore(chrominanceImage, coords, vec4(chrom, 1.0));

		imageStore(weightImage, coords, vec4(weights, 1.0));
	}
}