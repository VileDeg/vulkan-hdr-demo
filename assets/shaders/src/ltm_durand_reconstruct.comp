#version 460

#include "incl/defs.glsl"
#include "incl/compute_structs.glsl"
#if DURAND_CONVERT_LAB == 1
	#include "incl/color_spaces.glsl"
#endif
#if DURAND_APPLY_GTMO == 1
	#include "incl/tone_mapping.glsl"
#endif

#define GROUP_SIZE 1024
#define THREADS_X  32
#define THREADS_Y  32

layout (set = 0, binding = 0) 
#include "incl/computeUB.incl" 
ub;

layout (rgba32f, set = 0, binding = 1) uniform readonly image2D inChrominanceImage;
layout (rgba32f, set = 0, binding = 2) uniform readonly image2D inBaseFreqImage;
layout (rgba32f, set = 0, binding = 3) uniform readonly image2D inDetailImage;

layout (rgba32f, set = 0, binding = 4) uniform writeonly image2D viewportImage;

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y) in;
void main() {
	uvec2 dim = imageSize(inBaseFreqImage).xy;
	// Ignore threads that map to areas beyond the bounds of our image
	if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) {
		// Filter implementation from https://www.shadertoy.com/view/4dfGDH
		ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

        vec3  chrom  = imageLoad(inChrominanceImage, coords).rgb;
		float base   = imageLoad(inBaseFreqImage, coords).r;
		float detail = imageLoad(inDetailImage, coords).r;
		
		float offsetBase = (base + ub.durand.baseOffset) * ub.durand.baseScale;
		//float offsetBase = base * ub.baseScale + ub.baseOffset;
		
		float lumReconstruct = offsetBase + detail;

#if DURAND_LOG_LUM == 1
		// Bring luminance back to linear
		lumReconstruct = exp2(lumReconstruct);
		lumReconstruct -= 1;
		lumReconstruct /= DURAND_LOG_LUM_RES;
#endif
		// Reconstruct color from luminance
#if DURAND_CONVERT_LAB == 0
		vec3 outColor = lumReconstruct * chrom;
#else
		// X corresponds to luminance in Lab space
		chrom.x = lumReconstruct;
		vec3 outColor = lab2rgb(chrom);
#endif

#if 0
		float maxf = 100;
		vec3 fac = vec3(1,1,1) * (maxf-ub.baseOffset) + ub.normalizationColor.rgb * ub.baseOffset;
		outColor *= fac / maxf;
#endif

#if DURAND_APPLY_GTMO == 1
		outColor = applyGlobalToneMapping(outColor, ub.toneMappingMode);
#endif

		imageStore(viewportImage, coords, vec4(outColor, 1.0));
	}
}